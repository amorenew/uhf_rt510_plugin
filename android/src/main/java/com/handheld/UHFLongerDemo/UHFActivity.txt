package com.newdata.com.handheld.UHFDemo;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.support.v4.view.ViewCompat;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewConfiguration;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.SimpleAdapter;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.newdata.cn.pda.serialport.Tools;
import com.android.hdhe.uhf.reader.UhfReader;
import com.android.hdhe.uhf.readerInterface.TagModel;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UHFActivity extends Activity implements View.OnClickListener {
    private String accessPwd;
    private ArrayAdapter<String> adapterArea;
    private ArrayAdapter<CharSequence> adapterLockType;
    private ArrayAdapter<String> adapterPower;
    private ArrayAdapter<String> adapterSensitive;
    private ArrayAdapter<String> adatpterMemBank;
    private int addr = 0;
    /* access modifiers changed from: private */
    public int area = 0;
    private String[] areas = null;
    /* access modifiers changed from: private */
    public ArrayAdapter<String> arr_adapter;
    private Button button1;
    private Button button2;
    private Button button3;
    private Button button4;
    private Button buttonBack;
    private Button buttonClear;
    private Button buttonKill;
    private Button buttonLock;
    private Button buttonRead;
    /* access modifiers changed from: private */
    public Button buttonStart;
    private Button buttonWrite;
    private Button button_moresetting;
    private EditText editAccesslock;
    private EditText editAddr;
    private EditText editFrequency;
    private EditText editKillPassword;
    private EditText editLength;
    private EditText editPassword;
    private EditText editReadData;
    private EditText editWriteData;
    private SharedPreferences.Editor editor;
    private long exitTime = 0;
    private int frequency = 0;
    private KeyReceiver keyReceiver;
    private LinearLayout l1;
    private RelativeLayout l1epc;
    private LinearLayout l2;
    /* access modifiers changed from: private */
    public LinearLayout l2readandwrite;
    private LinearLayout l3;
    /* access modifiers changed from: private */
    public LinearLayout l3lockandkill;
    private LinearLayout l4;
    /* access modifiers changed from: private */
    public LinearLayout l4settings;
    /* access modifiers changed from: private */
    public LinearLayout l5moresettings;
    private int length = 1;
    /* access modifiers changed from: private */
    public ArrayList<EPC> listEPC;
    /* access modifiers changed from: private */
    public ArrayList<Map<String, Object>> listMap;
    /* access modifiers changed from: private */
    public ListView listViewData;
    /* access modifiers changed from: private */
    public ArrayList<String> listepc = new ArrayList<>();
    /* access modifiers changed from: private */
    public int lockMem = 0;
    private String[] lockMemArrays = {"Kill Password", "Access password", "EPC", "TID", "USER"};
    /* access modifiers changed from: private */
    public int lockMembank;
    /* access modifiers changed from: private */
    public int lockType;
    private Toast mToast;
    /* access modifiers changed from: private */
    public UhfReader manager;
    /* access modifiers changed from: private */
    public int membank;
    /* access modifiers changed from: private */
    public int power = 0;
    /* access modifiers changed from: private */
    public String[] powers = {"26dbm", "24dbm", "20dbm", "18dbm", "17dbm", "16dbm"};
    /* access modifiers changed from: private */
    public boolean runFlag = true;
    /* access modifiers changed from: private */
    public String selectEpc = "";
    /* access modifiers changed from: private */
    public int sensitive = 0;
    /* access modifiers changed from: private */
    public String[] sensitives = null;
    private SharedPreferences shared;
    /* access modifiers changed from: private */
    public Spinner spinnerEPCLock;
    /* access modifiers changed from: private */
    public Spinner spinnerEPCRead;
    private Spinner spinnerLockMem;
    private Spinner spinnerLockType;
    private Spinner spinnerMemBank;
    private Spinner spinnerPower;
    private Spinner spinnerSensitive;
    private Spinner spinnerWorkArea;
    /* access modifiers changed from: private */
    public boolean startFlag = false;
    private final String[] strMemBank = {"RESERVE", "EPC", "TID", "USER"};
    private TextView textVersion;
    /* access modifiers changed from: private */
    public TextView textView1;
    /* access modifiers changed from: private */
    public TextView textView2;
    /* access modifiers changed from: private */
    public TextView textView3;
    /* access modifiers changed from: private */
    public TextView textView4;
    /* access modifiers changed from: private */
    public Toast toast;
    /* access modifiers changed from: private */
    public View view1;
    /* access modifiers changed from: private */
    public View view2;
    /* access modifiers changed from: private */
    public View view3;
    /* access modifiers changed from: private */
    public View view4;
    private String what = "uhf";

    /* access modifiers changed from: protected */
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setOverflowShowingAlways();
        setContentView(R.layout.activity_uhf);
        try {
            setTitle(getString(R.string.app_name) + "-v" + getPackageManager().getPackageInfo(getPackageName(), 0).versionName);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        this.shared = getSharedPreferences("UhfRfPower", 0);
        this.editor = this.shared.edit();
        this.power = this.shared.getInt("power", 26);
        this.area = this.shared.getInt("area", 3);
        initView();
        new InventoryThread().start();
        Util.initSoundPool(this);
    }

    /* access modifiers changed from: protected */
    public void onResume() {
        super.onResume();
        ((TextView) findViewById(R.id.textview_title_config)).setText("Port:com13;Power:" + "rfid_power" + " (EU)");
        this.manager = UhfReader.getInstance();
        if (this.manager == null) {
            this.textVersion.setText(getString(R.string.serialport_init_fail_));
            setButtonClickable(this.buttonClear, false);
            setButtonClickable(this.buttonStart, false);
            return;
        }
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        registerReceiver();
        this.manager.setOutputPower(this.power);
        this.manager.setWorkArea(this.area);
    }

    /* access modifiers changed from: protected */
    public void onPause() {
        this.startFlag = false;
        this.buttonStart.setText(R.string.inventory);
        this.manager.close();
        super.onPause();
        unregisterReceiver();
    }

    /* access modifiers changed from: protected */
    public void onDestroy() {
        this.startFlag = false;
        this.runFlag = false;
        if (this.manager != null) {
            this.manager.close();
        }
        super.onDestroy();
    }

    private void initView() {
        int area_position;
        this.buttonStart = (Button) findViewById(R.id.button_start);
        this.buttonClear = (Button) findViewById(R.id.button_clear);
        this.listViewData = (ListView) findViewById(R.id.listView_data);
        this.textVersion = (TextView) findViewById(R.id.textView_version);
        this.buttonStart.setOnClickListener(this);
        this.buttonClear.setOnClickListener(this);
        this.editAccesslock = (EditText) findViewById(R.id.edittext_access_lock);
        this.listEPC = new ArrayList<>();
        this.l1 = (LinearLayout) findViewById(R.id.linearLayoutUhfEpc);
        this.l1.setOnTouchListener(new myOnTouch());
        this.l2 = (LinearLayout) findViewById(R.id.linearLayoutUhfRead);
        this.l2.setOnTouchListener(new myOnTouch());
        this.l3 = (LinearLayout) findViewById(R.id.linearLayoutUhfLock);
        this.l3.setOnTouchListener(new myOnTouch());
        this.l4 = (LinearLayout) findViewById(R.id.linearLayoutUhfSet);
        this.l4.setOnTouchListener(new myOnTouch());
        this.textView1 = (TextView) findViewById(R.id.textViewUhfEpc);
        this.textView2 = (TextView) findViewById(R.id.textViewUhfMore);
        this.textView3 = (TextView) findViewById(R.id.textViewUhfLock);
        this.textView4 = (TextView) findViewById(R.id.textViewUhfSet);
        this.view1 = findViewById(R.id.viewUhfEpc);
        this.view2 = findViewById(R.id.viewUhfMore);
        this.view3 = findViewById(R.id.viewUhfLock);
        this.view4 = findViewById(R.id.viewUhfSet);
        this.l1epc = (RelativeLayout) findViewById(R.id.l1epc);
        this.l2readandwrite = (LinearLayout) findViewById(R.id.l2read);
        this.l3lockandkill = (LinearLayout) findViewById(R.id.l3lock);
        this.l4settings = (LinearLayout) findViewById(R.id.l4settings);
        this.arr_adapter = new ArrayAdapter<>(this, 17367048, this.listepc);
        this.arr_adapter.setDropDownViewResource(17367049);
        this.spinnerEPCRead = (Spinner) findViewById(R.id.spinnerEPCread);
        this.spinnerEPCRead.setAdapter(this.arr_adapter);
        this.spinnerEPCLock = (Spinner) findViewById(R.id.spinnerEPClock);
        this.spinnerEPCLock.setAdapter(this.arr_adapter);
        this.spinnerMemBank = (Spinner) findViewById(R.id.spinner_membank);
        this.spinnerLockMem = (Spinner) findViewById(R.id.spinner_lock_mem);
        this.editAddr = (EditText) findViewById(R.id.edittext_addr);
        this.editLength = (EditText) findViewById(R.id.edittext_length);
        this.editPassword = (EditText) findViewById(R.id.editTextPassword);
        this.buttonRead = (Button) findViewById(R.id.button_read);
        this.buttonWrite = (Button) findViewById(R.id.button_write);
        this.buttonClear = (Button) findViewById(R.id.button_readClear);
        this.buttonLock = (Button) findViewById(R.id.button_lock_6c);
        this.buttonKill = (Button) findViewById(R.id.button_kill_6c);
        this.buttonBack = (Button) findViewById(R.id.button_back);
        this.button_moresetting = (Button) findViewById(R.id.button_uhf_more_settings);
        this.l5moresettings = (LinearLayout) findViewById(R.id.layout_uhf_more_settings);
        this.button_moresetting.setOnClickListener(this);
        this.editKillPassword = (EditText) findViewById(R.id.edit_kill_password);
        this.editWriteData = (EditText) findViewById(R.id.edittext_write);
        this.editReadData = (EditText) findViewById(R.id.linearLayout_readData);
        this.adatpterMemBank = new ArrayAdapter<>(this, 17367048, this.strMemBank);
        this.adatpterMemBank.setDropDownViewResource(17367049);
        this.spinnerLockType = (Spinner) findViewById(R.id.spinner_lock_type);
        this.adapterLockType = ArrayAdapter.createFromResource(this, R.array.arr_lockType, 17367048);
        this.adapterLockType.setDropDownViewResource(17367049);
        this.spinnerLockType.setAdapter(this.adapterLockType);
        this.spinnerMemBank.setAdapter(this.adatpterMemBank);
        this.buttonClear.setOnClickListener(this);
        this.buttonRead.setOnClickListener(this);
        this.buttonWrite.setOnClickListener(this);
        this.buttonKill.setOnClickListener(this);
        this.buttonLock.setOnClickListener(this);
        this.buttonBack.setOnClickListener(this);
        this.spinnerMemBank.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onItemSelected(AdapterView<?> adapterView, View arg1, int arg2, long arg3) {
                switch (arg2) {
                    case 0:
                        int unused = UHFActivity.this.membank = 0;
                        break;
                    case 1:
                        int unused2 = UHFActivity.this.membank = 1;
                        break;
                    case 2:
                        int unused3 = UHFActivity.this.membank = 2;
                        break;
                    case 3:
                        int unused4 = UHFActivity.this.membank = 3;
                        break;
                }
                int unused5 = UHFActivity.this.lockMembank = arg2 + 1;
            }

            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });
        this.spinnerLockMem.setAdapter(new ArrayAdapter(this, 17367049, this.lockMemArrays));
        this.spinnerLockMem.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long id) {
                Log.e("lockMem", "lockMem");
                switch (position) {
                    case 0:
                        int unused = UHFActivity.this.lockMem = 0;
                        break;
                    case 1:
                        int unused2 = UHFActivity.this.lockMem = 1;
                        break;
                    case 2:
                        int unused3 = UHFActivity.this.lockMem = 2;
                        break;
                    case 3:
                        int unused4 = UHFActivity.this.lockMem = 3;
                        break;
                    case 4:
                        int unused5 = UHFActivity.this.lockMem = 4;
                        break;
                }
                Log.e("lockMem", "lockMem = " + UHFActivity.this.lockMem);
            }

            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });
        this.spinnerLockType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onItemSelected(AdapterView<?> adapterView, View arg1, int arg2, long arg3) {
                int unused = UHFActivity.this.lockType = arg2;
            }

            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });
        this.spinnerEPCRead.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onItemSelected(AdapterView<?> adapterView, View arg1, int position, long arg3) {
                if (UHFActivity.this.listepc != null && UHFActivity.this.listepc.size() != 0) {
                    UHFActivity.this.manager.selectEPC(Tools.HexString2Bytes((String) UHFActivity.this.listepc.get(position)));
                    String unused = UHFActivity.this.selectEpc = (String) UHFActivity.this.listepc.get(position);
                    UHFActivity.this.spinnerEPCRead.setSelection(position, true);
                }
            }

            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });
        this.spinnerEPCLock.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onItemSelected(AdapterView<?> adapterView, View arg1, int position, long arg3) {
                if (UHFActivity.this.listepc.size() != 0) {
                    UHFActivity.this.manager.selectEPC(Tools.HexString2Bytes((String) UHFActivity.this.listepc.get(position)));
                    String unused = UHFActivity.this.selectEpc = (String) UHFActivity.this.listepc.get(position);
                    UHFActivity.this.spinnerEPCLock.setSelection(position, true);
                }
            }

            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });
        this.button1 = (Button) findViewById(R.id.button_min);
        this.button2 = (Button) findViewById(R.id.button_plus);
        this.button3 = (Button) findViewById(R.id.button_set);
        this.button4 = (Button) findViewById(R.id.button4);
        this.spinnerSensitive = (Spinner) findViewById(R.id.spinner1);
        this.spinnerPower = (Spinner) findViewById(R.id.spinner2);
        this.spinnerWorkArea = (Spinner) findViewById(R.id.spinner3);
        this.editFrequency = (EditText) findViewById(R.id.edit4);
        this.sensitives = getResources().getStringArray(R.array.arr_sensitivity);
        this.areas = getResources().getStringArray(R.array.arr_area);
        this.adapterSensitive = new ArrayAdapter<>(this, 17367049, this.sensitives);
        this.adapterPower = new ArrayAdapter<>(this, 17367049, this.powers);
        this.adapterArea = new ArrayAdapter<>(this, 17367050, this.areas);
        this.spinnerSensitive.setAdapter(this.adapterSensitive);
        this.spinnerPower.setAdapter(this.adapterPower);
        this.spinnerWorkArea.setAdapter(this.adapterArea);
        int power_position = 0;
        switch (this.power) {
            case 16:
                power_position = 5;
                break;
            case 17:
                power_position = 4;
                break;
            case 18:
                power_position = 3;
                break;
            case 20:
                power_position = 2;
                break;
            case 24:
                power_position = 1;
                break;
            case 26:
                power_position = 0;
                break;
        }
        this.spinnerPower.setSelection(power_position, true);
        if (this.area != 6) {
            area_position = this.area - 1;
        } else {
            area_position = 4;
        }
        this.spinnerWorkArea.setSelection(area_position, true);
        this.button1.setOnClickListener(this);
        this.button2.setOnClickListener(this);
        this.button3.setOnClickListener(this);
        this.button4.setOnClickListener(this);
        this.spinnerWorkArea.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long id) {
                switch (position) {
                    case 0:
                        int unused = UHFActivity.this.area = 1;
                        return;
                    case 1:
                        int unused2 = UHFActivity.this.area = 2;
                        return;
                    case 2:
                        int unused3 = UHFActivity.this.area = 3;
                        return;
                    case 3:
                        int unused4 = UHFActivity.this.area = 4;
                        return;
                    case 4:
                        int unused5 = UHFActivity.this.area = 6;
                        return;
                    default:
                        return;
                }
            }

            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });
        this.spinnerSensitive.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onItemSelected(AdapterView<?> adapterView, View arg1, int position, long arg3) {
                Log.e("", UHFActivity.this.sensitives[position]);
                switch (position) {
                    case 0:
                        int unused = UHFActivity.this.sensitive = 3;
                        return;
                    case 1:
                        int unused2 = UHFActivity.this.sensitive = 2;
                        return;
                    case 2:
                        int unused3 = UHFActivity.this.sensitive = 1;
                        return;
                    case 3:
                        int unused4 = UHFActivity.this.sensitive = 0;
                        return;
                    default:
                        return;
                }
            }

            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });
        this.spinnerPower.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            public void onItemSelected(AdapterView<?> adapterView, View arg1, int position, long arg3) {
                Log.e("", UHFActivity.this.powers[position]);
                switch (position) {
                    case 0:
                        int unused = UHFActivity.this.power = 26;
                        return;
                    case 1:
                        int unused2 = UHFActivity.this.power = 24;
                        return;
                    case 2:
                        int unused3 = UHFActivity.this.power = 20;
                        return;
                    case 3:
                        int unused4 = UHFActivity.this.power = 18;
                        return;
                    case 4:
                        int unused5 = UHFActivity.this.power = 17;
                        return;
                    case 5:
                        int unused6 = UHFActivity.this.power = 16;
                        return;
                    default:
                        return;
                }
            }

            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });
    }

    class InventoryThread extends Thread {
        byte[] accessPassword = Tools.HexString2Bytes("00000000");
        private List<TagModel> tagList;

        InventoryThread() {
        }

        public void run() {
            super.run();
            while (UHFActivity.this.runFlag) {
                if (UHFActivity.this.startFlag) {
                    this.tagList = UHFActivity.this.manager.inventoryRealTime();
                    if (this.tagList != null && !this.tagList.isEmpty()) {
                        Util.play(1, 0);
                        for (TagModel tag : this.tagList) {
                            if (tag == null) {
                                UHFActivity.this.addToList(UHFActivity.this.listEPC, "", (byte) -1);
                            } else {
                                UHFActivity.this.addToList(UHFActivity.this.listEPC, Tools.Bytes2HexString(tag.getmEpcBytes(), tag.getmEpcBytes().length), tag.getmRssi());
                            }
                        }
                    }
                    this.tagList = null;
                    try {
                        Thread.sleep(20);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    /* access modifiers changed from: private */
    public void addToList(final List<EPC> list, final String epc, final byte rssi) {
        runOnUiThread(new Runnable() {
            public void run() {
                if (!list.isEmpty()) {
                    int i = 0;
                    while (true) {
                        if (i >= list.size()) {
                            break;
                        }
                        EPC mEPC = (EPC) list.get(i);
                        if (epc.equals(mEPC.getEpc())) {
                            mEPC.setCount(mEPC.getCount() + 1);
                            mEPC.setRssi(rssi);
                            list.set(i, mEPC);
                            break;
                        }
                        if (i == list.size() - 1) {
                            EPC newEPC = new EPC();
                            newEPC.setEpc(epc);
                            newEPC.setCount(1);
                            newEPC.setRssi(rssi);
                            list.add(newEPC);
                            UHFActivity.this.listepc.add(epc);
                        }
                        i++;
                    }
                } else {
                    EPC epcTag = new EPC();
                    epcTag.setEpc(epc);
                    epcTag.setCount(1);
                    epcTag.setRssi(rssi);
                    list.add(epcTag);
                    UHFActivity.this.listepc.add(epc);
                }
                ArrayList unused = UHFActivity.this.listMap = new ArrayList();
                int idcount = 1;
                for (EPC epcdata : list) {
                    Map<String, Object> map = new HashMap<>();
                    map.put("ID", Integer.valueOf(idcount));
                    map.put("EPC", epcdata.getEpc());
                    map.put("COUNT", Integer.valueOf(epcdata.getCount()));
                    map.put("RSSI", Integer.valueOf(epcdata.getRssi()));
                    idcount++;
                    UHFActivity.this.listMap.add(map);
                }
                UHFActivity.this.listViewData.setAdapter(new SimpleAdapter(UHFActivity.this, UHFActivity.this.listMap, R.layout.listview_item, new String[]{"ID", "EPC", "COUNT", "RSSI"}, new int[]{R.id.textView_list_item_id, R.id.textView_list_item_barcode, R.id.textView_list_item_count, R.id.textView_list_item_rssi}));
                UHFActivity.this.spinnerEPCRead.setAdapter(UHFActivity.this.arr_adapter);
                UHFActivity.this.spinnerEPCLock.setAdapter(UHFActivity.this.arr_adapter);
                Util.play(1, 0);
            }
        });
    }

    private void setButtonClickable(Button button, boolean flag) {
        button.setClickable(flag);
        if (flag) {
            button.setTextColor(View.MEASURED_STATE_MASK);
        } else {
            button.setTextColor(-7829368);
        }
    }

    private void clearData() {
        this.listEPC.removeAll(this.listEPC);
        this.listViewData.setAdapter((ListAdapter) null);
        this.listepc.removeAll(this.listepc);
    }

    public void onClick(View v) {
        byte[] accessPassword = Tools.HexString2Bytes(this.editPassword.getText().toString());
        this.addr = Integer.valueOf(this.editAddr.getText().toString()).intValue();
        this.length = Integer.valueOf(this.editLength.getText().toString()).intValue();
        switch (v.getId()) {
            case R.id.button4:
                String freqStr = this.editFrequency.getText().toString();
                if (freqStr == null || "".equals(freqStr)) {
                    showToast(getString(R.string.freqSetting));
                    return;
                } else {
                    showToast(getString(R.string.setSuccess));
                    return;
                }
            case R.id.button_clear:
                clearData();
                return;
            case R.id.button_kill_6c:
                new AlertDialog.Builder(this).setTitle(R.string.sure_kill).setPositiveButton(R.string.sure, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int whichButton) {
                        UHFActivity.this.manager.selectEPC(Tools.HexString2Bytes(UHFActivity.this.selectEpc));
                        if (UHFActivity.this.manager.kill6C(Tools.HexString2Bytes(((EditText) UHFActivity.this.findViewById(R.id.edit_kill_password)).getText().toString()))) {
                            UHFActivity.this.showToast("Kill success!");
                        } else {
                            UHFActivity.this.showToast("Kill fail!");
                        }
                    }
                }).setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int whichButton) {
                    }
                }).create().show();
                return;
            case R.id.button_lock_6c:
                this.manager.selectEPC(Tools.HexString2Bytes(this.selectEpc));
                if (this.manager.lock6C(Tools.HexString2Bytes(this.editAccesslock.getText().toString()), this.lockMem, this.lockType)) {
                    showToast(getString(R.string.lock_successful_));
                    return;
                } else {
                    showToast(getString(R.string.lock_fail_));
                    return;
                }
            case R.id.button_min:
                this.manager.setSensitivity(this.sensitive);
                showToast(getString(R.string.setSuccess));
                return;
            case R.id.button_plus:
                this.editor.putInt("power", this.power);
                this.editor.commit();
                if (this.manager.setOutputPower(this.power)) {
                    showToast(getString(R.string.setSuccess));
                    return;
                }
                return;
            case R.id.button_read:
                this.manager.selectEPC(Tools.HexString2Bytes(this.selectEpc));
                if (accessPassword.length != 4) {
                    showToast(getString(R.string.password_is_4_bytes));
                    return;
                }
                byte[] data = this.manager.readFrom6C(this.membank, this.addr, this.length, accessPassword);
                if (data != null && data.length > 1) {
                    this.editReadData.append(getString(R.string.read_data_) + Tools.Bytes2HexString(data, data.length) + "\n");
                    return;
                } else if (data != null) {
                    this.editReadData.append(getString(R.string.read_fail_error) + (data[0] & 255) + "\n");
                    return;
                } else {
                    this.editReadData.append(getString(R.string.read_fail_return_null) + "\n");
                    return;
                }
            case R.id.button_readClear:
                this.editReadData.setText("");
                return;
            case R.id.button_set:
                this.manager.setWorkArea(this.area);
                this.editor.putInt("area", this.area);
                this.editor.commit();
                showToast(getString(R.string.setSuccess));
                return;
            case R.id.button_start:
                if (!this.startFlag) {
                    this.startFlag = true;
                    this.buttonStart.setText(R.string.stop_inventory);
                    return;
                }
                this.startFlag = false;
                this.buttonStart.setText(R.string.inventory);
                return;
            case R.id.button_uhf_more_settings:
                this.l5moresettings.setVisibility(8);
                new AlertDialog.Builder(this).setTitle(R.string.note_the_following_operation_may_lead_to_module_does_not_work_).setPositiveButton(R.string.sure, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int whichButton) {
                        UHFActivity.this.l5moresettings.setVisibility(0);
                    }
                }).setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int whichButton) {
                    }
                }).create().show();
                return;
            case R.id.button_write:
                this.manager.selectEPC(Tools.HexString2Bytes(this.selectEpc));
                if (accessPassword.length != 4) {
                    showToast(getString(R.string.password_is_4_bytes));
                    return;
                }
                String writeData = this.editWriteData.getText().toString();
                if (writeData.length() % 4 != 0) {
                    showToast(getString(R.string.the_unit_is_word_1word_2bytes));
                }
                byte[] dataBytes = Tools.HexString2Bytes(writeData);
                if (this.manager.writeTo6C(accessPassword, this.membank, this.addr, dataBytes.length / 2, dataBytes)) {
                    this.editReadData.append(getString(R.string.write_successful_) + "\n");
                    return;
                } else {
                    this.editReadData.append(getString(R.string.write_failue_) + "\n");
                    return;
                }
            default:
                return;
        }
    }

    public boolean onMenuItemSelected(int featureId, MenuItem item) {
        return super.onMenuItemSelected(featureId, item);
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    public boolean onMenuOpened(int featureId, Menu menu) {
        if (featureId == 8 && menu != null && menu.getClass().getSimpleName().equals("MenuBuilder")) {
            try {
                Method m = menu.getClass().getDeclaredMethod("setOptionalIconsVisible", new Class[]{Boolean.TYPE});
                m.setAccessible(true);
                m.invoke(menu, new Object[]{true});
            } catch (Exception e) {
            }
        }
        return super.onMenuOpened(featureId, menu);
    }

    private void setOverflowShowingAlways() {
        try {
            ViewConfiguration config = ViewConfiguration.get(this);
            Field menuKeyField = ViewConfiguration.class.getDeclaredField("sHasPermanentMenuKey");
            menuKeyField.setAccessible(true);
            menuKeyField.setBoolean(config, false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public class myOnTouch implements View.OnTouchListener {
        public myOnTouch() {
        }

        public boolean onTouch(View view, MotionEvent arg1) {
            switch (view.getId()) {
                case R.id.linearLayoutUhfEpc:
                    UHFActivity.this.SetVisible((LinearLayout) null, UHFActivity.this.textView1, UHFActivity.this.view1);
                    return true;
                case R.id.linearLayoutUhfLock:
                    UHFActivity.this.SetVisible(UHFActivity.this.l3lockandkill, UHFActivity.this.textView3, UHFActivity.this.view3);
                    return true;
                case R.id.linearLayoutUhfRead:
                    UHFActivity.this.SetVisible(UHFActivity.this.l2readandwrite, UHFActivity.this.textView2, UHFActivity.this.view2);
                    return true;
                case R.id.linearLayoutUhfSet:
                    UHFActivity.this.SetVisible(UHFActivity.this.l4settings, UHFActivity.this.textView4, UHFActivity.this.view4);
                    return true;
                default:
                    return true;
            }
        }
    }

    /* access modifiers changed from: private */
    public void SetVisible(LinearLayout layout, TextView textView, View view) {
        if (this.listepc.size() == 0 && (layout == this.l2readandwrite || layout == this.l3lockandkill)) {
            showToast("Please inventory!");
            return;
        }
        this.l1epc.setVisibility(8);
        this.l2readandwrite.setVisibility(8);
        this.l3lockandkill.setVisibility(8);
        this.l4settings.setVisibility(8);
        this.textView1.setTextColor(getResources().getColor(R.color.black));
        this.view1.setBackgroundColor(getResources().getColor(R.color.white));
        this.textView2.setTextColor(getResources().getColor(R.color.black));
        this.view2.setBackgroundColor(getResources().getColor(R.color.white));
        this.textView3.setTextColor(getResources().getColor(R.color.black));
        this.view3.setBackgroundColor(getResources().getColor(R.color.white));
        this.textView4.setTextColor(getResources().getColor(R.color.black));
        this.view4.setBackgroundColor(getResources().getColor(R.color.white));
        textView.setTextColor(getResources().getColor(R.color.tabSelect));
        view.setBackgroundColor(getResources().getColor(R.color.tabSelect));
        if (layout == null) {
            this.l1epc.setVisibility(0);
            this.startFlag = false;
            this.buttonStart.setText(R.string.inventory);
            return;
        }
        layout.setVisibility(View.VISIBLE);
    }

    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == 4) {
            if (System.currentTimeMillis() - this.exitTime < 2000) {
                finish();
            } else {
                this.exitTime = System.currentTimeMillis();
                showToast("Double click to exit!");
                return true;
            }
        }
        return super.onKeyDown(keyCode, event);
    }

    /* access modifiers changed from: private */
    public void showToast(String message) {
        if (this.mToast == null) {
            this.mToast = Toast.makeText(this, message, 0);
            this.mToast.show();
            return;
        }
        this.mToast.setText(message);
        this.mToast.show();
    }

    private void registerReceiver() {
        this.keyReceiver = new KeyReceiver();
        IntentFilter filter = new IntentFilter();
        filter.addAction("android.rfid.FUN_KEY");
        filter.addAction("android.intent.action.FUN_KEY");
        registerReceiver(this.keyReceiver, filter);
    }

    private void unregisterReceiver() {
        unregisterReceiver(this.keyReceiver);
    }

    private class KeyReceiver extends BroadcastReceiver {
        private KeyReceiver() {
        }

        public void onReceive(Context context, Intent intent) {
            int keyCode = intent.getIntExtra("keyCode", 0);
            if (keyCode == 0) {
                keyCode = intent.getIntExtra("keycode", 0);
            }
            if (intent.getBooleanExtra("keydown", false)) {
                if (UHFActivity.this.toast == null) {
                    Toast unused = UHFActivity.this.toast = Toast.makeText(UHFActivity.this, "KeyReceiver:keyCode = down" + keyCode, 0);
                } else {
                    UHFActivity.this.toast.setText("KeyReceiver:keyCode = down" + keyCode);
                }
                UHFActivity.this.toast.show();
                switch (keyCode) {
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                        UHFActivity.this.onClick(UHFActivity.this.buttonStart);
                        return;
                    default:
                        return;
                }
            }
        }
    }
}
